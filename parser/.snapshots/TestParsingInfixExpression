(*ast.Program)({
  Statements: ([]ast.Statement) (len=8) {
    (*ast.ExpressionStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "INT",
        Literal: (string) (len=1) "5"
      },
      Expression: (*ast.InfixExpression)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=1) "+",
          Literal: (string) (len=1) "+"
        },
        Left: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        }),
        Operator: (string) (len=1) "+",
        Right: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        })
      })
    }),
    (*ast.ExpressionStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "INT",
        Literal: (string) (len=1) "5"
      },
      Expression: (*ast.InfixExpression)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=1) "-",
          Literal: (string) (len=1) "-"
        },
        Left: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        }),
        Operator: (string) (len=1) "-",
        Right: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        })
      })
    }),
    (*ast.ExpressionStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "INT",
        Literal: (string) (len=1) "5"
      },
      Expression: (*ast.InfixExpression)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=1) "*",
          Literal: (string) (len=1) "*"
        },
        Left: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        }),
        Operator: (string) (len=1) "*",
        Right: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        })
      })
    }),
    (*ast.ExpressionStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "INT",
        Literal: (string) (len=1) "5"
      },
      Expression: (*ast.InfixExpression)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=1) "/",
          Literal: (string) (len=1) "/"
        },
        Left: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        }),
        Operator: (string) (len=1) "/",
        Right: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        })
      })
    }),
    (*ast.ExpressionStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "INT",
        Literal: (string) (len=1) "5"
      },
      Expression: (*ast.InfixExpression)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=1) ">",
          Literal: (string) (len=1) ">"
        },
        Left: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        }),
        Operator: (string) (len=1) ">",
        Right: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        })
      })
    }),
    (*ast.ExpressionStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "INT",
        Literal: (string) (len=1) "5"
      },
      Expression: (*ast.InfixExpression)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=1) "<",
          Literal: (string) (len=1) "<"
        },
        Left: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        }),
        Operator: (string) (len=1) "<",
        Right: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        })
      })
    }),
    (*ast.ExpressionStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "INT",
        Literal: (string) (len=1) "5"
      },
      Expression: (*ast.InfixExpression)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=2) "==",
          Literal: (string) (len=2) "=="
        },
        Left: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        }),
        Operator: (string) (len=2) "==",
        Right: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        })
      })
    }),
    (*ast.ExpressionStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "INT",
        Literal: (string) (len=1) "5"
      },
      Expression: (*ast.InfixExpression)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=2) "!=",
          Literal: (string) (len=2) "!="
        },
        Left: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        }),
        Operator: (string) (len=2) "!=",
        Right: (*ast.IntegerLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=3) "INT",
            Literal: (string) (len=1) "5"
          },
          Value: (int64) 5
        })
      })
    })
  }
})
