(*ast.Program)({
  Statements: ([]ast.Statement) (len=3) {
    (*ast.LetStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "LET",
        Literal: (string) (len=3) "let"
      },
      Name: (*ast.Identifier)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=10) "IDENTIFIER",
          Literal: (string) (len=1) "a"
        },
        Value: (string) (len=1) "a"
      }),
      Value: (*ast.StringLiteral)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=6) "STRING",
          Literal: (string) (len=6) "hello "
        },
        Value: (string) (len=6) "hello "
      })
    }),
    (*ast.LetStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "LET",
        Literal: (string) (len=3) "let"
      },
      Name: (*ast.Identifier)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=10) "IDENTIFIER",
          Literal: (string) (len=1) "b"
        },
        Value: (string) (len=1) "b"
      }),
      Value: (*ast.StringLiteral)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=6) "STRING",
          Literal: (string) (len=5) "world"
        },
        Value: (string) (len=5) "world"
      })
    }),
    (*ast.LetStatement)({
      Token: (token.Token) {
        Type: (token.TokenType) (len=3) "LET",
        Literal: (string) (len=3) "let"
      },
      Name: (*ast.Identifier)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=10) "IDENTIFIER",
          Literal: (string) (len=1) "c"
        },
        Value: (string) (len=1) "c"
      }),
      Value: (*ast.InfixExpression)({
        Token: (token.Token) {
          Type: (token.TokenType) (len=1) "+",
          Literal: (string) (len=1) "+"
        },
        Left: (*ast.StringLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=6) "STRING",
            Literal: (string) (len=6) "hello "
          },
          Value: (string) (len=6) "hello "
        }),
        Operator: (string) (len=1) "+",
        Right: (*ast.StringLiteral)({
          Token: (token.Token) {
            Type: (token.TokenType) (len=6) "STRING",
            Literal: (string) (len=5) "world"
          },
          Value: (string) (len=5) "world"
        })
      })
    })
  }
})
